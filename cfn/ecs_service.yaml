AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Creates an ECS service, task definition and loadbalancer

Parameters:

  AppPort:
    Type: Number
    Default: 8000

  ExecutionRoleArn:
    Type: String

  ECSCluster:
    Type: String

  Name:
    Type: String
    Default: ""

  DjangoWebImage:
    Type: String

  NginxProxyImage:
    Type: String

  DBUser:
    Type: String

  DBName:
    Type: String

  DBPassword:
    Type: String

  DBHost:
    Type: String

  DBPort:
    Type: String

  SecretKey:
    Type: String
    Default: "asecretstring"

  HealthCheckPath:
    Type: String
    Default: "/admin/login/?next=/admin/"

  VpcId:
    Type: String

  DefaultSecurityGroup:
    Type: String

  PublicSubnetIds:
    Type: String

  ServiceName:
    Type: String

Resources:

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Allow HTTP to the loadbalancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref DefaultSecurityGroup
        - !Ref SecurityGroup
      Subnets:
        - !Select [0, !Split [",", !Ref PublicSubnetIds]]
        - !Select [1, !Split [",", !Ref PublicSubnetIds]]
        - !Select [2, !Split [",", !Ref PublicSubnetIds]]

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      HealthCheckPath: !Ref HealthCheckPath

  ECSService:
    DependsOn: LoadBalancerListener
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: !Ref ServiceName
      LoadBalancers:
        - ContainerName: "nginx-proxy"
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref ECSTaskdefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref DefaultSecurityGroup
          Subnets:
            - !Select [0, !Split [",", !Ref PublicSubnetIds]]
            - !Select [1, !Split [",", !Ref PublicSubnetIds]]
            - !Select [2, !Split [",", !Ref PublicSubnetIds]]

  ECSTaskdefinition:
#    DependsOn: DjangoSecretKey
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Cpu: 512
      Memory: 1024
      NetworkMode: "awsvpc"
      ExecutionRoleArn: !Ref ExecutionRoleArn
      RequiresCompatibilities:
        - "FARGATE"
      Volumes:
        - Name: "static-data"
      ContainerDefinitions:
        - Name: "nginx-proxy"
          Image: !Ref NginxProxyImage
          Essential: true
          Environment:
            - Name: "APP_HOST"
              Value: "localhost"
            - Name: "APP_PORT"
              Value: !Ref AppPort
            - Name: "LISTEN_PORT"
              Value: 80
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: "tcp"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: "true"
              awslogs-group: !Sub "/ecs/${Name}"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"
          MountPoints:
            - ContainerPath: "/vol/static"
              SourceVolume: "static-data"
              ReadOnly: true
        - Name: "django-web"
          Image: !Ref DjangoWebImage
          Essential: true
          PortMappings:
            - ContainerPort: !Ref AppPort
              HostPort: !Ref AppPort
              Protocol: "tcp"
          Environment:
            - Name: "APP_PORT"
              Value: !Ref AppPort
            - Name: "DB_USER"
              Value: !Ref DBUser
            - Name: "DB_NAME"
              Value: !Ref DBName
            - Name: "DB_PASS"
              Value: !Ref DBPassword
            - Name: "DB_HOST"
              Value: !Ref DBHost
            - Name: "DB_PORT"
              Value: !Ref DBPort
            - Name: "SECRET_KEY"
              Value: "{{resolve:secretsmanager:DjangoSecretKey:SecretString}}",
          MountPoints:
            - ContainerPath: "/vol/web"
              SourceVolume: "static-data"
              ReadOnly: false
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: "true"
              awslogs-group: !Sub "/ecs/${Name}"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"

  DjangoSecretKey:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: "This secret has a dynamically generated secret password."
      GenerateSecretString:
        PasswordLength: 127
        ExcludeCharacters: '"@/\'

Outputs:

  LoadBalancer:
    Description: "A reference to the Application Load Balancer"
    Value: !Ref LoadBalancer

  LoadBalancerUrl:
    Description: "The URL of the ALB"
    Value: !GetAtt LoadBalancer.DNSName

  ECSService:
    Description: "The Name of the ECS Service"
    Value: !GetAtt ECSService.Name