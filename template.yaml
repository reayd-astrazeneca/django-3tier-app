AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Creates a 3tier django application, with Postgres RDS database, application loadbalancers and ECS container system.

Parameters:

  AppName:
    Type: String
    Description: "The name to give the postgres database"
    Default: "django3tierapp"

  DBUser:
    Type: String
    Description: "The name of the API user to use in connections to the database."
    Default: "api_user"

  DefaultSecurityGroup:
    Type: String
    Description: "The default EC2 security group used for ECS, RDS and loadbalancer intercommunication."
    Default: "sg-d29f3cb4"

  PublicSubnetIds:
    Type: String
    Description: "A comma delimited list of public subnets for the loadbalancers."
    Default: "subnet-30612954,subnet-24aaeb52,subnet-0e70fa56"

  VpcId:
    Type: String
    Description: "The ID of the VPC to use for the network components."
    Default: "vpc-6c2a5b08"

  EcrRepo:
    Type: String
    Description: "The repository string for the Elastic container service tasks."
    Default: "701168364071.dkr.ecr.eu-west-1.amazonaws.com/django-3tier-app"

Resources:

  ECSTaskExecutionRolePolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: '*'
          PolicyName: CloudWatchLogs

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Ref AppName

  Database:
    Type: AWS::Serverless::Application
    Properties:
      Location: cfn/database.yaml
      Parameters:
        DBUser: !Ref DBUser
        DBName: !Ref AppName

#  ContentDistribution:
#    Type: AWS::Serverless::Application
#    Properties:
#      Location: cfn/cdn.yaml
#      Parameters:
#        DomainName: !GetAtt [WebService, Outputs.LoadBalancerUrl]

  WebService:
    Type: AWS::Serverless::Application
    Properties:
      Location: cfn/ecs_service.yaml
      Parameters:
        ServiceName: web
        ExecutionRoleArn: !GetAtt ECSTaskExecutionRolePolicy.Arn
        ECSCluster: !Ref ECSCluster
        Name: "web"
        NginxProxyImage: !Sub "${EcrRepo}:proxy-latest"
        DjangoWebImage: !Sub "${EcrRepo}:web-latest"
        DBUser: !Ref DBUser
        DBName: !Ref AppName
        DBPassword: !Join ['', ['{{resolve:secretsmanager:', !GetAtt [Database, Outputs.RDSSecret], ':SecretString:password}}' ]]
        DBHost: !GetAtt [Database, Outputs.EndpointAddress]
        DBPort: !GetAtt [Database, Outputs.EndpointPort]
        HealthCheckPath: "/admin/login/?next=/admin/"
        VpcId: !Ref VpcId
        DefaultSecurityGroup: !Ref DefaultSecurityGroup
        PublicSubnetIds: !Ref PublicSubnetIds

#Outputs:
#  CloudFrontEndpoint:
#    Description: The Name of the ECS Service
#    Value: !GetAtt [ContentDistribution, Outputs.DomainName]